package token

import "testing"

func TestKindIsKeyword(t *testing.T) {
	golden := []struct {
		kind Kind
		want bool
	}{
		// Keywords.
		{Break, true},
		{Case, true},
		{Chan, true},
		{Const, true},
		{Continue, true},
		{Default, true},
		{Defer, true},
		{Else, true},
		{Fallthrough, true},
		{For, true},
		{Func, true},
		{Go, true},
		{Goto, true},
		{If, true},
		{Import, true},
		{Interface, true},
		{Map, true},
		{Package, true},
		{Range, true},
		{Return, true},
		{Select, true},
		{Struct, true},
		{Switch, true},
		{Type, true},
		{Var, true},

		// Other tokens.
		{Add, false},
		{AddAssign, false},
		{And, false},
		{AndAssign, false},
		{Arrow, false},
		{Assign, false},
		{Clear, false},
		{ClearAssign, false},
		{Colon, false},
		{Comma, false},
		{Comment, false},
		{Dec, false},
		{DeclAssign, false},
		{Div, false},
		{DivAssign, false},
		{Ellipsis, false},
		{EOF, false},
		{Eq, false},
		{Error, false},
		{Float, false},
		{Gt, false},
		{Gte, false},
		{Ident, false},
		{Imag, false},
		{Inc, false},
		{Int, false},
		{Land, false},
		{Lbrace, false},
		{Lbrack, false},
		{Lor, false},
		{Lparen, false},
		{Lt, false},
		{Lte, false},
		{Mod, false},
		{ModAssign, false},
		{Mul, false},
		{MulAssign, false},
		{Neq, false},
		{Not, false},
		{Or, false},
		{OrAssign, false},
		{Period, false},
		{Rbrace, false},
		{Rbrack, false},
		{Rparen, false},
		{Rune, false},
		{Semicolon, false},
		{Shl, false},
		{ShlAssign, false},
		{Shr, false},
		{ShrAssign, false},
		{String, false},
		{Sub, false},
		{SubAssign, false},
		{Xor, false},
		{XorAssign, false},
	}

	for i, g := range golden {
		got := g.kind.IsKeyword()
		if got != g.want {
			t.Errorf("i=%d: expected %t, got %t for token %v.", i, g.want, got, g.kind)
		}
	}
}

func TestKindIsOperator(t *testing.T) {
	golden := []struct {
		kind Kind
		want bool
	}{
		// Operators and delimiters.
		{Add, true},
		{AddAssign, true},
		{And, true},
		{AndAssign, true},
		{Arrow, true},
		{Assign, true},
		{Clear, true},
		{ClearAssign, true},
		{Colon, true},
		{Comma, true},
		{Dec, true},
		{DeclAssign, true},
		{Div, true},
		{DivAssign, true},
		{Ellipsis, true},
		{Eq, true},
		{Gt, true},
		{Gte, true},
		{Inc, true},
		{Land, true},
		{Lbrace, true},
		{Lbrack, true},
		{Lor, true},
		{Lparen, true},
		{Lt, true},
		{Lte, true},
		{Mod, true},
		{ModAssign, true},
		{Mul, true},
		{MulAssign, true},
		{Neq, true},
		{Not, true},
		{Or, true},
		{OrAssign, true},
		{Period, true},
		{Rbrace, true},
		{Rbrack, true},
		{Rparen, true},
		{Semicolon, true},
		{Shl, true},
		{ShlAssign, true},
		{Shr, true},
		{ShrAssign, true},
		{Sub, true},
		{SubAssign, true},
		{Xor, true},
		{XorAssign, true},

		// Other tokens.
		{Break, false},
		{Case, false},
		{Chan, false},
		{Comment, false},
		{Const, false},
		{Continue, false},
		{Default, false},
		{Defer, false},
		{Else, false},
		{EOF, false},
		{Error, false},
		{Fallthrough, false},
		{Float, false},
		{For, false},
		{Func, false},
		{Go, false},
		{Goto, false},
		{Ident, false},
		{If, false},
		{Imag, false},
		{Import, false},
		{Int, false},
		{Interface, false},
		{Map, false},
		{Package, false},
		{Range, false},
		{Return, false},
		{Rune, false},
		{Select, false},
		{String, false},
		{Struct, false},
		{Switch, false},
		{Type, false},
		{Var, false},
	}

	for i, g := range golden {
		got := g.kind.IsOperator()
		if got != g.want {
			t.Errorf("i=%d: expected %t, got %t for token type %v.", i, g.want, got, g.kind)
		}
	}
}

func TestKindIsLiteral(t *testing.T) {
	golden := []struct {
		kind Kind
		want bool
	}{
		// Literals.
		{Int, true},
		{Float, true},
		{Imag, true},
		{Rune, true},
		{String, true},

		// Other tokens.
		{Add, false},
		{AddAssign, false},
		{And, false},
		{AndAssign, false},
		{Arrow, false},
		{Assign, false},
		{Break, false},
		{Case, false},
		{Chan, false},
		{Clear, false},
		{ClearAssign, false},
		{Colon, false},
		{Comma, false},
		{Comment, false},
		{Const, false},
		{Continue, false},
		{Dec, false},
		{DeclAssign, false},
		{Default, false},
		{Defer, false},
		{Div, false},
		{DivAssign, false},
		{Ellipsis, false},
		{Else, false},
		{EOF, false},
		{Eq, false},
		{Error, false},
		{Fallthrough, false},
		{For, false},
		{Func, false},
		{Go, false},
		{Goto, false},
		{Gt, false},
		{Gte, false},
		{Ident, false},
		{If, false},
		{Import, false},
		{Inc, false},
		{Interface, false},
		{Land, false},
		{Lbrace, false},
		{Lbrack, false},
		{Lor, false},
		{Lparen, false},
		{Lt, false},
		{Lte, false},
		{Map, false},
		{Mod, false},
		{ModAssign, false},
		{Mul, false},
		{MulAssign, false},
		{Neq, false},
		{Not, false},
		{Or, false},
		{OrAssign, false},
		{Package, false},
		{Period, false},
		{Range, false},
		{Rbrace, false},
		{Rbrack, false},
		{Return, false},
		{Rparen, false},
		{Select, false},
		{Semicolon, false},
		{Shl, false},
		{ShlAssign, false},
		{Shr, false},
		{ShrAssign, false},
		{Struct, false},
		{Sub, false},
		{SubAssign, false},
		{Switch, false},
		{Type, false},
		{Var, false},
		{Xor, false},
		{XorAssign, false},
	}

	for i, g := range golden {
		got := g.kind.IsLiteral()
		if got != g.want {
			t.Errorf("i=%d: expected %t, got %t for token type %v.", i, g.want, got, g.kind)
		}
	}
}
